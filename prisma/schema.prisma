datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  nodes    Node[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Group {
  id    Int    @id @default(autoincrement())
  name  String @unique
  nodes Node[]
}

model Field {
  id    Int    @id @default(autoincrement())
  name  String @unique
  nodes Node[]
}

model TimePeriod {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  startDate   String
  endDate     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodes Node[]
}

model GeographicalArea {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodes Node[]
}

model ModernCountryArea {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodes Node[]
}

model Node {
  id          Int                 @id @default(autoincrement())
  title       String
  body        String
  // tags        Tag[]
  group       Group[]
  field       Field[]

  timePeriods TimePeriod[]
  areas       GeographicalArea[]
  countries   ModernCountryArea[]

  eventDateStart String?
  eventDateEnd   String?
  url            String?

  sourceLinks    Links[]
  targetLinks    Target[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Links {
  id          Int    @id @default(autoincrement())
  sourceId    Int
  source      Node   @relation(fields: [sourceId], references: [id]) 
  targets     Target[]
  value       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Target {
  id        Int    @id @default(autoincrement())
  targetId  Int
  linkId    Int
  link      Links  @relation(fields: [linkId], references: [id])
  node      Node   @relation(fields: [targetId], references: [id])
}
